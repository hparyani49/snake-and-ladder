{"version":3,"sources":["client/assets/dice.gif","client/components/pages/Game/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Game","props","row","col","getPos","num","Math","floor","initialGame","ladders","snakes","i","GAMEROW","j","useState","playerPos","setPlayerPos","name","pos","players","setPlayers","activePlayer","setActivePlayer","isRolling","setIsRolling","diceVal","setDiceVal","startGame","setStartGame","togglePlayer","numberOfPlayers","length","getPlayerIndex","selectPlayerAndStart","e","numOfPlayers","target","value","newPlayers","playerInfo","push","className","map","cur","index","rowIndex","colIndex","Object","keys","eachPlayer","playerIndex","onClick","setTimeout","isTogglePlayer","getDiceValue","max","random","newPlayerPos","activePlayerObj","oldPos","newPos","Number","alert","window","location","reload","elimPlayerName","src","DiceGif","type","id","for","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc8c0869.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dice.b44733eb.gif\";","import React from 'react';\nimport DiceGif from '../../../assets/dice.gif';\nimport './game.scss';\nimport { useState } from 'react';\n\nconst Game = (props) => {\n\n    const GAMEROW = 10, GAMECOL = 10;\n    //Utills\n    const getPlaceholder = (row, col) => {\n        return row * 10 + (row % 2 === 0 ? col + 1 : GAMECOL - col);\n    }\n    const getPos = (num) => {\n        if (!num) {\n            return '00';\n        }\n        let row = Math.floor(num / 10);\n        let col = (row % 2 === 0 ? num % 10 : GAMECOL - num % 10 - 1);\n        return row + '' + col;\n    }\n    const getDiceValue = (max = 7) => {\n        let value = Math.floor(Math.random() * Math.floor(max));\n        if (!value) {\n            return getDiceValue();\n        } else {\n            return value;\n        }\n    }\n\n    let initialGame = [];\n    let ladders = { '16': 33, '22': 56, '59': 88, '51': 80 };\n    let snakes = { '39': 27, '40': 19, '64': 47, '94': 72 };\n    for (let i = GAMEROW - 1; i >= 0; i--) {\n        initialGame[i] = [];\n        for (let j = 0; j < GAMECOL; j++) {\n            initialGame[i][j] = getPlaceholder(i, j);\n        }\n    }\n    let playerInitPos = {};\n    let initPlayers = [{ name: 'Player 1', pos: '' }, { name: 'Player 2', pos: '' }];\n    const [playerPos, setPlayerPos] = useState(playerInitPos);\n    const [players, setPlayers] = useState(initPlayers);\n    const [activePlayer, setActivePlayer] = useState(0);\n\n    //Dice states\n    const [isRolling, setIsRolling] = useState(false);\n    const [diceVal, setDiceVal] = useState(0);\n\n    //Init games\n    const [startGame, setStartGame] = useState(false);\n\n    const onDiceClick = () => {\n        setIsRolling(true);\n        setTimeout(() => {\n            let isTogglePlayer = true;\n            setIsRolling(false);\n            let diceVal = getDiceValue();\n            setDiceVal(diceVal);\n            let newPlayerPos = { ...playerPos };\n            let newPlayers = [...players];\n\n            let activePlayerObj = newPlayers[activePlayer];\n            let oldPos = activePlayerObj.pos;\n            let newPos = getPos((activePlayerObj.pos ? Number(getPos(activePlayerObj.pos)) : -1) + diceVal);\n            // let newPos = getPos(Number(getPos(activePlayerObj.pos ? Number(activePlayerObj.pos) : 0)) + diceVal);\n\n            if (Number(newPos) >= 100) {\n                togglePlayer();\n                return;\n            } else if (Number(newPos) == 90) {\n                alert('Winner is ' + activePlayerObj.name);\n                window.location.reload();\n            }\n\n            if (newPlayerPos[newPos]) {\n                let elimPlayerName = newPlayerPos[newPos][0];\n                newPlayers[getPlayerIndex(elimPlayerName)].pos = '';\n                isTogglePlayer = false;\n            }\n\n            if (ladders[newPos]) {\n                newPos = getPos(ladders[newPos]);\n            } else if (snakes[newPos]) {\n                newPos = getPos(snakes[newPos]);\n            }\n\n            newPlayerPos[newPos] = [activePlayerObj.name];\n\n            if (oldPos) {\n                delete newPlayerPos[oldPos];\n            }\n\n            if (diceVal == 6) {\n                isTogglePlayer = false;\n            }\n\n            activePlayerObj.pos = newPos;\n            isTogglePlayer && togglePlayer();\n            setPlayerPos(newPlayerPos);\n            setPlayers(newPlayers);\n        }, 300)\n    }\n\n    const togglePlayer = () => {\n        let numberOfPlayers = players.length;\n        if(numberOfPlayers == 1){\n            return;\n        }\n        if (activePlayer == numberOfPlayers - 1) {\n            setActivePlayer(0);\n        } else {\n            setActivePlayer(activePlayer + 1);\n        }\n    }\n\n    const getPlayerIndex = (name) => {\n        for (let i = 0; i < players.length; i++) {\n            if (players[i].name == name) {\n                return i;\n            }\n        }\n    }\n\n    const selectPlayerAndStart = (e) => {\n        let numOfPlayers = e.target.value;\n        let newPlayers = [];\n        for(let i = 1; i <= numOfPlayers; i++){\n            let playerInfo = {name: 'Player ' + i, pos: ''}\n            newPlayers.push(playerInfo);\n        }\n        setPlayers(newPlayers);\n        setStartGame(true);\n    }\n\n\n    return (\n        <>\n            <div className='game-container'>\n                <h2 className='heading'>Snakes & Ladders</h2>\n                <h4 className='heading'>Active Player: <span className={`player player-${activePlayer}`}>{players[activePlayer].name}</span></h4>\n                <div className='start-positions'>\n                    <h2 className='player-heading'>Players:</h2>\n                    {players.map((cur, index) => {\n                        return <div className='each-player'><div className='name'>{cur.name}</div><div className={`player-circle player-${index}`}></div></div>\n                    })}\n                </div>\n                <div className='board'>\n                    {initialGame.map((row, rowIndex) => {\n                        return <div className='row'>\n                            {row.map((col, colIndex) => {\n                                return <div className={`col ${initialGame[rowIndex][colIndex] % 2 == 0 ? 'even' : 'odd'}`}>\n                                    <div className='board-place'>{initialGame[rowIndex][colIndex]}</div>\n                                    {Object.keys(playerPos).map((cur) => {\n                                        if (cur == (rowIndex + '' + colIndex)) {\n                                            return <>\n                                                {playerPos[cur].map((eachPlayer, playerIndex) => {\n                                                    return <div className={`player player-${getPlayerIndex(eachPlayer)}`}></div>\n                                                })}\n                                            </>\n                                        }\n                                    })}\n                                </div>\n                            })}\n                        </div>\n                    })}\n                </div>\n                <div className='dice-holder'>\n                    <div className='dice' onClick={onDiceClick}>\n                        {isRolling ? <img src={DiceGif} className='dice-gif' /> :\n                            <div className='dice-value'>{diceVal}</div>}\n                    </div>\n                </div>\n            </div>\n            {!startGame ? <>\n                <div className='select-players'>\n                    <p>How Many Players?</p>\n                    <div>\n                        <input type=\"radio\" id=\"1\" name=\"players\" value=\"1\" onClick={selectPlayerAndStart} />\n                        <label for=\"male\">1</label><br />\n                    </div>\n                    <div>\n                        <input type=\"radio\" id=\"2\" name=\"players\" value=\"2\" onClick={selectPlayerAndStart} />\n                        <label for=\"female\">2</label><br />\n                    </div>\n                    <div>\n                        <input type=\"radio\" id=\"3\" name=\"players\" value=\"3\" onClick={selectPlayerAndStart} />\n                        <label for=\"other\">3</label><br />\n                    </div>\n                    <div>\n                        <input type=\"radio\" id=\"4\" name=\"players\" value=\"4\" onClick={selectPlayerAndStart} />\n                        <label for=\"other\">4</label>\n                    </div>\n                </div>\n                <div className='overlay'></div>\n            </> : null}\n        </>\n    )\n}\n\nexport default Game;","import React from 'react';\nimport Routes from './client/routes';\nimport { BrowserRouter } from \"react-router-dom\";\nimport Game from './client/components/pages/Game/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}