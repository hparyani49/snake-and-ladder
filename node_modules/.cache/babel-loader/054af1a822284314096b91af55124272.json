{"ast":null,"code":"var _jsxFileName = \"/home/hitesh/work/snake-and-ladder/src/client/components/pages/Game/Game.jsx\";\nimport React from 'react';\nimport DiceGif from '../../../assets/dice.gif';\nimport './game.scss';\nimport { useState } from 'react';\n\nconst Game = props => {\n  const GAMEROW = 10,\n        GAMECOL = 10; //Utills\n\n  const getPlaceholder = (row, col) => {\n    return row * 10 + (row % 2 === 0 ? col + 1 : GAMECOL - col);\n  };\n\n  const getPos = num => {\n    if (!num) {\n      return '00';\n    }\n\n    let row = Math.floor(num / 10);\n    let col = row % 2 === 0 ? num % 10 : GAMECOL - num % 10 - 1;\n    return row + '' + col;\n  };\n\n  const getDiceValue = (max = 7) => {\n    let value = Math.floor(Math.random() * Math.floor(max));\n\n    if (!value) {\n      return getDiceValue();\n    } else {\n      return value;\n    }\n  };\n\n  let initialGame = [];\n  let ladders = {\n    '16': 33,\n    '22': 56,\n    '59': 88,\n    '51': 80\n  };\n  let snakes = {\n    '39': 27,\n    '40': 19,\n    '64': 47,\n    '94': 72\n  };\n\n  for (let i = GAMEROW - 1; i >= 0; i--) {\n    initialGame[i] = [];\n\n    for (let j = 0; j < GAMECOL; j++) {\n      initialGame[i][j] = getPlaceholder(i, j);\n    }\n  }\n\n  let playerInitPos = {};\n  let initPlayers = [{\n    name: 'Player 1',\n    pos: ''\n  }, {\n    name: 'Player 2',\n    pos: ''\n  }];\n  const [playerPos, setPlayerPos] = useState(playerInitPos);\n  const [players, setPlayers] = useState(initPlayers);\n  const [activePlayer, setActivePlayer] = useState(0); //Dice states\n\n  const [isRolling, setIsRolling] = useState(false);\n  const [diceVal, setDiceVal] = useState(0); //Init games\n\n  const [startGame, setStartGame] = useState(false);\n\n  const onDiceClick = () => {\n    setIsRolling(true);\n    setTimeout(() => {\n      let isTogglePlayer = true;\n      setIsRolling(false);\n      let diceVal = getDiceValue();\n      setDiceVal(diceVal);\n      let newPlayerPos = { ...playerPos\n      };\n      let newPlayers = [...players];\n      let activePlayerObj = newPlayers[activePlayer];\n      let oldPos = activePlayerObj.pos;\n      let newPos = getPos((activePlayerObj.pos ? Number(getPos(activePlayerObj.pos)) : -1) + diceVal); // let newPos = getPos(Number(getPos(activePlayerObj.pos ? Number(activePlayerObj.pos) : 0)) + diceVal);\n\n      if (Number(newPos) >= 100) {\n        togglePlayer();\n        return;\n      } else if (Number(newPos) == 90) {\n        alert('Winner is ' + activePlayerObj.name);\n        window.location.reload();\n      }\n\n      if (newPlayerPos[newPos]) {\n        let elimPlayerName = newPlayerPos[newPos][0];\n        newPlayers[getPlayerIndex(elimPlayerName)].pos = '';\n        isTogglePlayer = false;\n      }\n\n      if (ladders[newPos]) {\n        newPos = getPos(ladders[newPos]);\n      } else if (snakes[newPos]) {\n        newPos = getPos(snakes[newPos]);\n      }\n\n      newPlayerPos[newPos] = [activePlayerObj.name];\n\n      if (oldPos) {\n        delete newPlayerPos[oldPos];\n      }\n\n      if (diceVal == 6) {\n        isTogglePlayer = false;\n      }\n\n      activePlayerObj.pos = newPos;\n      isTogglePlayer && togglePlayer();\n      setPlayerPos(newPlayerPos);\n      setPlayers(newPlayers);\n    }, 300);\n  };\n\n  const togglePlayer = () => {\n    let numberOfPlayers = players.length;\n\n    if (numberOfPlayers == 1) {\n      return;\n    }\n\n    if (activePlayer == numberOfPlayers - 1) {\n      setActivePlayer(0);\n    } else {\n      setActivePlayer(++activePlayer);\n    }\n  };\n\n  const getPlayerIndex = name => {\n    for (let i = 0; i < players.length; i++) {\n      if (players[i].name == name) {\n        return i;\n      }\n    }\n  };\n\n  const selectPlayerAndStart = e => {\n    let numOfPlayers = e.target.value;\n    let newPlayers = [];\n\n    for (let i = 1; i <= numOfPlayers; i++) {\n      let playerInfo = {\n        name: 'Player ' + i,\n        pos: ''\n      };\n      newPlayers.push(playerInfo);\n    }\n\n    setPlayers(newPlayers);\n    setStartGame(true);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, \"Snakes & Ladders\"), /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, \"Active Player: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: `player player-${activePlayer}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 56\n    }\n  }, players[activePlayer].name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"start-positions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"player-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }, \"Players:\"), players.map((cur, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"each-player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 32\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 61\n      }\n    }, cur.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: `player-circle player-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 99\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, initialGame.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 32\n      }\n    }, row.map((col, colIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: `col ${initialGame[rowIndex][colIndex] % 2 == 0 ? 'even' : 'odd'}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 40\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"board-place\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 37\n        }\n      }, initialGame[rowIndex][colIndex]), Object.keys(playerPos).map(cur => {\n        if (cur == rowIndex + '' + colIndex) {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, playerPos[cur].map((eachPlayer, playerIndex) => {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: `player player-${getPlayerIndex(eachPlayer)}`,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 60\n              }\n            });\n          }));\n        }\n      }));\n    }));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dice-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dice\",\n    onClick: onDiceClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, isRolling ? /*#__PURE__*/React.createElement(\"img\", {\n    src: DiceGif,\n    className: \"dice-gif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 38\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dice-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 29\n    }\n  }, diceVal)))), !startGame ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"select-players\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }, \"How Many Players?\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"1\",\n    name: \"players\",\n    value: \"1\",\n    onClick: selectPlayerAndStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"male\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 25\n    }\n  }, \"1\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 52\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"2\",\n    name: \"players\",\n    value: \"2\",\n    onClick: selectPlayerAndStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"female\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, \"2\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 54\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"3\",\n    name: \"players\",\n    value: \"3\",\n    onClick: selectPlayerAndStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"other\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, \"3\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 53\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"4\",\n    name: \"players\",\n    value: \"4\",\n    onClick: selectPlayerAndStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"other\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 25\n    }\n  }, \"4\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  })) : null);\n};\n\nexport default Game;","map":{"version":3,"sources":["/home/hitesh/work/snake-and-ladder/src/client/components/pages/Game/Game.jsx"],"names":["React","DiceGif","useState","Game","props","GAMEROW","GAMECOL","getPlaceholder","row","col","getPos","num","Math","floor","getDiceValue","max","value","random","initialGame","ladders","snakes","i","j","playerInitPos","initPlayers","name","pos","playerPos","setPlayerPos","players","setPlayers","activePlayer","setActivePlayer","isRolling","setIsRolling","diceVal","setDiceVal","startGame","setStartGame","onDiceClick","setTimeout","isTogglePlayer","newPlayerPos","newPlayers","activePlayerObj","oldPos","newPos","Number","togglePlayer","alert","window","location","reload","elimPlayerName","getPlayerIndex","numberOfPlayers","length","selectPlayerAndStart","e","numOfPlayers","target","playerInfo","push","map","cur","index","rowIndex","colIndex","Object","keys","eachPlayer","playerIndex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DiceGif from '../../../assets/dice.gif';\nimport './game.scss';\nimport { useState } from 'react';\n\nconst Game = (props) => {\n\n    const GAMEROW = 10, GAMECOL = 10;\n    //Utills\n    const getPlaceholder = (row, col) => {\n        return row * 10 + (row % 2 === 0 ? col + 1 : GAMECOL - col);\n    }\n    const getPos = (num) => {\n        if (!num) {\n            return '00';\n        }\n        let row = Math.floor(num / 10);\n        let col = (row % 2 === 0 ? num % 10 : GAMECOL - num % 10 - 1);\n        return row + '' + col;\n    }\n    const getDiceValue = (max = 7) => {\n        let value = Math.floor(Math.random() * Math.floor(max));\n        if (!value) {\n            return getDiceValue();\n        } else {\n            return value;\n        }\n    }\n\n    let initialGame = [];\n    let ladders = { '16': 33, '22': 56, '59': 88, '51': 80 };\n    let snakes = { '39': 27, '40': 19, '64': 47, '94': 72 };\n    for (let i = GAMEROW - 1; i >= 0; i--) {\n        initialGame[i] = [];\n        for (let j = 0; j < GAMECOL; j++) {\n            initialGame[i][j] = getPlaceholder(i, j);\n        }\n    }\n    let playerInitPos = {};\n    let initPlayers = [{ name: 'Player 1', pos: '' }, { name: 'Player 2', pos: '' }];\n    const [playerPos, setPlayerPos] = useState(playerInitPos);\n    const [players, setPlayers] = useState(initPlayers);\n    const [activePlayer, setActivePlayer] = useState(0);\n\n    //Dice states\n    const [isRolling, setIsRolling] = useState(false);\n    const [diceVal, setDiceVal] = useState(0);\n\n    //Init games\n    const [startGame, setStartGame] = useState(false);\n\n    const onDiceClick = () => {\n        setIsRolling(true);\n        setTimeout(() => {\n            let isTogglePlayer = true;\n            setIsRolling(false);\n            let diceVal = getDiceValue();\n            setDiceVal(diceVal);\n            let newPlayerPos = { ...playerPos };\n            let newPlayers = [...players];\n\n            let activePlayerObj = newPlayers[activePlayer];\n            let oldPos = activePlayerObj.pos;\n            let newPos = getPos((activePlayerObj.pos ? Number(getPos(activePlayerObj.pos)) : -1) + diceVal);\n            // let newPos = getPos(Number(getPos(activePlayerObj.pos ? Number(activePlayerObj.pos) : 0)) + diceVal);\n\n            if (Number(newPos) >= 100) {\n                togglePlayer();\n                return;\n            } else if (Number(newPos) == 90) {\n                alert('Winner is ' + activePlayerObj.name);\n                window.location.reload();\n            }\n\n            if (newPlayerPos[newPos]) {\n                let elimPlayerName = newPlayerPos[newPos][0];\n                newPlayers[getPlayerIndex(elimPlayerName)].pos = '';\n                isTogglePlayer = false;\n            }\n\n            if (ladders[newPos]) {\n                newPos = getPos(ladders[newPos]);\n            } else if (snakes[newPos]) {\n                newPos = getPos(snakes[newPos]);\n            }\n\n            newPlayerPos[newPos] = [activePlayerObj.name];\n\n            if (oldPos) {\n                delete newPlayerPos[oldPos];\n            }\n\n            if (diceVal == 6) {\n                isTogglePlayer = false;\n            }\n\n            activePlayerObj.pos = newPos;\n            isTogglePlayer && togglePlayer();\n            setPlayerPos(newPlayerPos);\n            setPlayers(newPlayers);\n        }, 300)\n    }\n\n    const togglePlayer = () => {\n        let numberOfPlayers = players.length;\n        if(numberOfPlayers == 1){\n            return;\n        }\n        if (activePlayer == numberOfPlayers - 1) {\n            setActivePlayer(0);\n        } else {\n            setActivePlayer(++activePlayer);\n        }\n    }\n\n    const getPlayerIndex = (name) => {\n        for (let i = 0; i < players.length; i++) {\n            if (players[i].name == name) {\n                return i;\n            }\n        }\n    }\n\n    const selectPlayerAndStart = (e) => {\n        let numOfPlayers = e.target.value;\n        let newPlayers = [];\n        for(let i = 1; i <= numOfPlayers; i++){\n            let playerInfo = {name: 'Player ' + i, pos: ''}\n            newPlayers.push(playerInfo);\n        }\n        setPlayers(newPlayers);\n        setStartGame(true);\n    }\n\n\n    return (\n        <>\n            <div className='game-container'>\n                <h2 className='heading'>Snakes & Ladders</h2>\n                <h4 className='heading'>Active Player: <span className={`player player-${activePlayer}`}>{players[activePlayer].name}</span></h4>\n                <div className='start-positions'>\n                    <h2 className='player-heading'>Players:</h2>\n                    {players.map((cur, index) => {\n                        return <div className='each-player'><div className='name'>{cur.name}</div><div className={`player-circle player-${index}`}></div></div>\n                    })}\n                </div>\n                <div className='board'>\n                    {initialGame.map((row, rowIndex) => {\n                        return <div className='row'>\n                            {row.map((col, colIndex) => {\n                                return <div className={`col ${initialGame[rowIndex][colIndex] % 2 == 0 ? 'even' : 'odd'}`}>\n                                    <div className='board-place'>{initialGame[rowIndex][colIndex]}</div>\n                                    {Object.keys(playerPos).map((cur) => {\n                                        if (cur == (rowIndex + '' + colIndex)) {\n                                            return <>\n                                                {playerPos[cur].map((eachPlayer, playerIndex) => {\n                                                    return <div className={`player player-${getPlayerIndex(eachPlayer)}`}></div>\n                                                })}\n                                            </>\n                                        }\n                                    })}\n                                </div>\n                            })}\n                        </div>\n                    })}\n                </div>\n                <div className='dice-holder'>\n                    <div className='dice' onClick={onDiceClick}>\n                        {isRolling ? <img src={DiceGif} className='dice-gif' /> :\n                            <div className='dice-value'>{diceVal}</div>}\n                    </div>\n                </div>\n            </div>\n            {!startGame ? <>\n                <div className='select-players'>\n                    <p>How Many Players?</p>\n                    <div>\n                        <input type=\"radio\" id=\"1\" name=\"players\" value=\"1\" onClick={selectPlayerAndStart} />\n                        <label for=\"male\">1</label><br />\n                    </div>\n                    <div>\n                        <input type=\"radio\" id=\"2\" name=\"players\" value=\"2\" onClick={selectPlayerAndStart} />\n                        <label for=\"female\">2</label><br />\n                    </div>\n                    <div>\n                        <input type=\"radio\" id=\"3\" name=\"players\" value=\"3\" onClick={selectPlayerAndStart} />\n                        <label for=\"other\">3</label><br />\n                    </div>\n                    <div>\n                        <input type=\"radio\" id=\"4\" name=\"players\" value=\"4\" onClick={selectPlayerAndStart} />\n                        <label for=\"other\">4</label>\n                    </div>\n                </div>\n                <div className='overlay'></div>\n            </> : null}\n        </>\n    )\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}